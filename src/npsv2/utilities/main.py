import argparse
from ..simulation import filter_reads_gc, filter_reads_gnomad

def main():
    parser = argparse.ArgumentParser(
        "npsv2u", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    subparsers = parser.add_subparsers(dest="command", help="Sub-command help")

    parser_gccovg = subparsers.add_parser(
        "gc_covg", help="Filter synthetic reads based on gc coverage profile"
    )
    parser_gccovg.add_argument(
        "--fasta-path",
        dest="fasta_path",
        type=str,
        help="Path to FASTA file used to generate the synthetic reads",
        required=True,
    )
    parser_gccovg.add_argument(
        "--stats-path",
        dest="stats_path",
        type=str,
        help="Path to stats JSON file generated by preprocessing command",
        required=True,
    )
    parser_gccovg.add_argument(
        "-i", "--input", help="Input SAM file.", type=str, dest="input", required=True
    )

    parser_gnomadcovg = subparsers.add_parser(
        "gnomad_covg", help="Filter synthetic reads based on gnomAD coverage profile"
    )
    parser_gnomadcovg.add_argument(
        "--covg-path",
        dest="covg_path",
        type=str,
        help="Path to file with gnomAD coverage profile",
        required=True,
    )
    parser_gnomadcovg.add_argument(
        "-i", "--input", help="Input SAM file.", type=str, dest="input", required=True
    )

    args = parser.parse_args()

    if args.command == "gc_covg":
        filter_reads_gc(args.stats_path, args.fasta_path, args.input, "/dev/stdout")
    elif args.command == "gnomad_covg":
        filter_reads_gnomad(args.covg_path, args.input, "/dev/stdout")

if __name__ == "__main__":
    main()